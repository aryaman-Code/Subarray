
 ------------------ EFFICIENT APPROACH___________________
 
static int subarrayXor(int a[],int n,int k)
    {
        HashMap<Integer,Integer> h=new HashMap<>();
        int xori=0;int ans=0;
        for(int i=0;i<n;i++)
        {
            xori=xori^a[i];
            if(xori==k)
                ans++;
            int lambda=xori^k;  // lambda is y
            if(h.containsKey(lambda))
              ans+=h.get(lambda);

            if(h.containsKey(xori))
                h.put(xori, h.get(xori) + 1);
            else
                h.put(xori,1);
            }

        return ans;
    }
    
    TIME COMPLEXITY-O(NlogN)
    SPACE COMPLEXITY-O(N)
    
     
     _______________NAIVE APPROACH___________________
     static int subarrayXor1(int a[],int n,int k)
    {
        int ans=0;
        for(int i=0;i<n;i++)
        {
           int xor=0;
            for(int j=i;j<n;j++)
            {
                xor=xor^a[j];
                if(xor==k)
                    ans++;
            }
        }
        return ans;
    }
      TIME COMPLEXITY-O(N*N)
    SPACE COMPLEXITY-O(1)
   
   ____________________________________________
   public static void main(String args[])
    {

        int[] arr = { 4, 2, 2, 6, 4 };
        int n = arr.length;
        int m = 6;

        System.out.println("Number of subarrays"
                + " having given XOR is "
                + subarrayXor(arr, n, m));
    }
